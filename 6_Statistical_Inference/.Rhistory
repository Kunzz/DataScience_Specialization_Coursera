library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
read.csv(path2csv, stringAsFactors= FALSE)
read.csv(path2csv, stringsAsFactors= FALSE)
mydf  <- read.csv(path2csv, stringsAsFactors= FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country: r_arch)
cran
select(cran, -time)
select(cran, -5:20)
select(cran, -size(5:20)
)
-5:20
-(5:20)
select(cran, -(5:20))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
For example, filter(cran, country == "US" | country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, >100500)
filter(cran, size>100500)
filter(cran, size>100500, r_os=="linux-gnu)
filter(cran, size>100500, r_os=="linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na)
filter(cran, !is.na(cran))
filter(cran, !is.na(cran)==TRUE)
filter(cran, !is.na(cran)'==TRUE)
filter(cran, !is.na(cran)==TRUE)''
filter(cran)
filter(cran, !is.na(r_version)==TRUE)''
filter(cran, !is.na(r_version)==TRUE)
filter(cran, !is.na(r_version))
cran2  <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version),ip_id)
cran3  <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3,  size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3,  correct_size=size+1000)
summarize(cran, avg_bytes = mean(size))
exit
quit
swirl()
3
swirl()
library
library(dplyr)
cran  <- tbl_df()
my_df  <- tbl_df(cran)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package(cran, package)
by_package <- group_by(cran, package)
by_package
summary(by_package,mean(size))
summarize(by_package,mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts  <- filter(pack_sum, count>679)
top_counts
View(top_counts)
?arrange
top_counts_sorted  <- arrange(top_counts, count)
top_counts_sorted  <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique  <- filter(pack_sum, unique >465)
View(top_unique)
top_unique_sorted  <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
?chain
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
swirl
kunzzh
swirl()
library(tidyr)
students
?gather
gather(students,sex, count, -grade)
student2
students2
res  <- gather(sex, class, count, -grade)
res  <- gather(sex_class, count, -grade)
res  <- gather(students2, sex_class, count, -grade)
res
?seperate
?separate
separate(data = res, col = sex_class, into = c("sex","class"))
submit()
submit()
students3
submit()
submit()
submit()
submit()
?spread
submit()
submit()
submit()
submit()
extract_numeric("class5")
submit()
submit()
submit()
?mutate
submit()
tudents3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
students3
?mutate
submit()
gather(students3, class, grade, class1:class5, na.rm = TRUE)
x  <- gather(students3, class, grade, class1:class5, na.rm = TRUE)
xx <-  spread(x, test, grade)
xx
mutate(xx, class = extract_numeric(class1:class5))
mutate(xx, extract_numeric(class1:class5))
mutate(xx, extract_numeric(class))
mutate(xx, class=extract_numeric(class))
submit()
submit()
skip
skip()
students4
submit()
submit()
submit()
submit()
passed
failed
passed  <- mutate(passed, "passed")
passed  <- Ã¶amutate(passed, "passed")
passed  <- passed %>% mutate(passed, status="passed")
passed <- passed %>% mutate(status = "passed")
passed <- passed %>% mutate(status = "passed")
passed <- mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
skip()
swirl()
mutate(passed, status="passed")
passed  <- mutate(passed, status="passed")
failed <- mutate(failed, status="failed")
packageVersion('dplyr')
bind_rows(passed, failed)
sat
?separate
submit()
submit()
submit()
submit()
select(sat,x <- -contains("total"))
x <- select(sat, -contains("total"))
x
xx  <- gather(x,part_sex, value = count, -score_range)
xx
separate(xx, col=part_sex, into=c("part","sex")
)
submit()
submit()
submit()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_data  <- today()
this_day  <- today()
this_day
year(this_dat)
year(this_day)
wday()
wday(this_day)
wday(this_day, label=TRUE)
this_moment  <-  now()
this_moment
second(this_moment)
my_data  <- ymd("1989-05-17")
my_date  <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hours = 7, minutes = 58, seconds = 55)
update(this_moment, hours = 7, minutes = 58, seconds = 55)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
skip
skip()
this_moment
nyc  <- now(America/New_York)
nyc  <- now("America/New_York")
nyx
nyc
depart  <- nyc+days/(2)
depart  <- nyc+days(2)
depart
depart  <- (depart, hour=17, minute=34)
depart  <- update(depart, hour=17, minute=34)
depart  <- update(depart, hours=17, minutes=34)
depart
arrive  <-  depart+hours(15)+minutes(50)
?with_tz
with_tz(arrive, tzone="Asia/Hong_Kong")
arrive  <- with_tz(arrive, tzone="Asia/Hong_Kong")
arrive
last_time  <-  mdy("June 17, 2008",tz = "Singapore")
last_time
new_interval(arrive, last_time)
?new_interval
new_interval(last_time,arrive)
how_long  <- new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
setwd("~/Desktop/Coursera/Statistical Inference")
source('~/Desktop/Coursera/Statistical Inference/Untitled.R')
setwd("~/Desktop/Coursera/Statistical Inference")
library(ggplot2)
source('~/.active-rstudio-document')
