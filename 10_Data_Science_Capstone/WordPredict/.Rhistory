tabPanel("Result",
conditionalPanel(condition = "input.text != ''",
verbatimTextOutput("text"),
verbatimTextOutput("cleaned"), verbatimTextOutput("msg"),
selectInput("predicts","Word predictions:",choices=c(""))
)
),
tabPanel("Documentation", htmlOutput("help"),
tags$div(id="help",
HTML("<iframe id='ifrHelp' src='help.html' height='550' width='650'></iframe>")
)
)
)
)
),
fluidRow(HTML("<div style='margin-left:18px;margin-bottom:12px;color:navy;'><strong>Creation date: Jan.2016</strong></div>") ),
fluidRow(HTML("<div style='margin-left:18px;margin-bottom:12px;margin-top:-12px;color:navy;'><strong><big>By <a title='Write to me!...'
href='mailto:svicente99@yahoo.com'>Sergio Vicente</a></big></strong>&nbsp;&nbsp;&nbsp;&nbsp;
&hearts;&nbsp;<a title='Know my blog' target='_blank' href='http://svicente99.wordpress.com'>About me</a>&nbsp;&spades;</div>") )
)
shinyApp(ui = ui, server = server)
source('~/Dropbox/Coursera/DataScience_Capstone_ShinyApp-master/app.R')
# =================================================
# : Coursera.org
# : Data Science Specialization - Capstone Project
# : January. 2016
# :
# : Shiny Application: Predicting Next Word
# :
# : Author  - Sergio Vicente
# : twitter - @svicente99
# =================================================
library(shiny)
source("functions.R")
server <- function(input, output, session) {
output$text <- renderText({
paste("Input text is:", input$text)
})
observe({
iniTime <- Sys.time()
textCleansed <- clean(input$text)
if(textCleansed != " ")
{
output$cleaned <- renderText({
paste0("Cleansed text: [",textCleansed,"]")
})
textCleansed <- gsub(" \\* "," ",textCleansed)    # not taking account of profanity terms
predictWords <- predict_model(textCleansed)
updateSelectInput(session = session, inputId = "predicts", choices = predictWords)
endTime <- Sys.time()
output$msg <- renderText({
paste(msg, "\n", sprintf("- Total time processing = %6.3f msecs",1000*(endTime-iniTime)))
})
gc()
}
})
}
ui <- fluidPage(
# Application title
titlePanel("Data Science Capstone Project - Next Word Prediction App"),
# User interface controls1
sidebarLayout(
sidebarPanel(
p("Input a word or text and press <ENTER> or click <Predict> to see the next word(s) suggestions:"),
textInput(inputId="text", label = ""),
submitButton("Predict"),
HTML('<script type="text/javascript">
document.getElementById("text").focus();
</script>')
),
mainPanel(
tabsetPanel(
tabPanel("Result",
conditionalPanel(condition = "input.text != ''",
verbatimTextOutput("text"),
verbatimTextOutput("cleaned"), verbatimTextOutput("msg"),
selectInput("predicts","Word predictions:",choices=c(""))
)
),
tabPanel("Documentation", htmlOutput("help"),
tags$div(id="help",
HTML("<iframe id='ifrHelp' src='help.html' height='550' width='650'></iframe>")
)
)
)
)
),
fluidRow(HTML("<div style='margin-left:18px;margin-bottom:12px;color:navy;'><strong>Creation date: Jan.2016</strong></div>") ),
fluidRow(HTML("<div style='margin-left:18px;margin-bottom:12px;margin-top:-12px;color:navy;'><strong><big>By <a title='Write to me!...'
href='mailto:svicente99@yahoo.com'>Sergio Vicente</a></big></strong>&nbsp;&nbsp;&nbsp;&nbsp;
&hearts;&nbsp;<a title='Know my blog' target='_blank' href='http://svicente99.wordpress.com'>About me</a>&nbsp;&spades;</div>") )
)
shinyApp(ui = ui, server = server)
# =================================================
# : Coursera.org
# : Data Science Specialization - Capstone Project
# : January. 2016
# :
# : Shiny Application: Predicting Next Word
# :
# : Author  - Sergio Vicente
# : twitter - @svicente99
# =================================================
library(shiny)
source("functions.R")
server <- function(input, output, session) {
output$text <- renderText({
paste("Input text is:", input$text)
})
observe({
iniTime <- Sys.time()
textCleansed <- clean(input$text)
if(textCleansed != " ")
{
output$cleaned <- renderText({
paste0("Cleansed text: [",textCleansed,"]")
})
textCleansed <- gsub(" \\* "," ",textCleansed)    # not taking account of profanity terms
predictWords <- predict_model(textCleansed)
updateSelectInput(session = session, inputId = "predicts", choices = predictWords)
endTime <- Sys.time()
output$msg <- renderText({
paste(msg, "\n", sprintf("- Total time processing = %6.3f msecs",1000*(endTime-iniTime)))
})
gc()
}
})
}
ui <- fluidPage(
# Application title
titlePanel("Data Science Capstone Project - Next Word Prediction App"),
# User interface controls1
sidebarLayout(
sidebarPanel(
p("Input a word or text and press <ENTER> or click <Predict> to see the next word(s) suggestions:"),
textInput(inputId="text", label = ""),
submitButton("Predict"),
HTML('<script type="text/javascript">
document.getElementById("text").focus();
</script>')
),
mainPanel(
tabsetPanel(
tabPanel("Result",
conditionalPanel(condition = "input.text != ''",
verbatimTextOutput("text"),
verbatimTextOutput("cleaned"), verbatimTextOutput("msg"),
selectInput("predicts","Word predictions:",choices=c(""))
)
),
tabPanel("Documentation", htmlOutput("help"),
tags$div(id="help",
HTML("<iframe id='ifrHelp' src='help.html' height='550' width='650'></iframe>")
)
)
)
)
),
fluidRow(HTML("<div style='margin-left:18px;margin-bottom:12px;color:navy;'><strong>Creation date: Jan.2016</strong></div>") ),
fluidRow(HTML("<div style='margin-left:18px;margin-bottom:12px;margin-top:-12px;color:navy;'><strong><big>By <a title='Write to me!...'
href='mailto:svicente99@yahoo.com'>Sergio Vicente</a></big></strong>&nbsp;&nbsp;&nbsp;&nbsp;
&hearts;&nbsp;<a title='Know my blog' target='_blank' href='http://svicente99.wordpress.com'>About me</a>&nbsp;&spades;</div>") )
)
shinyApp(ui = ui, server = server)
# =================================================
# : Coursera.org
# : Data Science Specialization - Capstone Project
# : January. 2016
# :
# : Shiny Application: Predicting Next Word
# :
# : Author  - Sergio Vicente
# : twitter - @svicente99
# =================================================
library(shiny)
source("functions.R")
server <- function(input, output, session) {
output$text <- renderText({
paste("Input text is:", input$text)
})
observe({
iniTime <- Sys.time()
textCleansed <- clean(input$text)
if(textCleansed != " ")
{
output$cleaned <- renderText({
paste0("Cleansed text: [",textCleansed,"]")
})
textCleansed <- gsub(" \\* "," ",textCleansed)    # not taking account of profanity terms
predictWords <- predict_model(textCleansed)
updateSelectInput(session = session, inputId = "predicts", choices = predictWords)
endTime <- Sys.time()
output$msg <- renderText({
paste(msg, "\n", sprintf("- Total time processing = %6.3f msecs",1000*(endTime-iniTime)))
})
gc()
}
})
}
ui <- fluidPage(
# Application title
titlePanel("Data Science Capstone Project - Next Word Prediction App"),
# User interface controls1
sidebarLayout(
sidebarPanel(
p("Input a word or text and press <ENTER> or click <Predict> to see the next word(s) suggestions:"),
textInput(inputId="text", label = ""),
submitButton("Predict"),
HTML('<script type="text/javascript">
document.getElementById("text").focus();
</script>')
),
mainPanel(
tabsetPanel(
tabPanel("Result",
conditionalPanel(condition = "input.text != ''",
verbatimTextOutput("text"),
verbatimTextOutput("cleaned"), verbatimTextOutput("msg"),
selectInput("predicts","Word predictions:",choices=c(""))
)
),
tabPanel("Documentation", htmlOutput("help"),
tags$div(id="help",
HTML("<iframe id='ifrHelp' src='help.html' height='550' width='650'></iframe>")
)
)
)
)
),
fluidRow(HTML("<div style='margin-left:18px;margin-bottom:12px;color:navy;'><strong>Creation date: Jan.2016</strong></div>") ),
fluidRow(HTML("<div style='margin-left:18px;margin-bottom:12px;margin-top:-12px;color:navy;'><strong><big>By <a title='Write to me!...'
href='mailto:svicente99@yahoo.com'>Sergio Vicente</a></big></strong>&nbsp;&nbsp;&nbsp;&nbsp;
&hearts;&nbsp;<a title='Know my blog' target='_blank' href='http://svicente99.wordpress.com'>About me</a>&nbsp;&spades;</div>") )
)
shinyApp(ui = ui, server = server)
```{r, warning=FALSE, message=FALSE}
suppressWarnings(library("stringi"))
suppressWarnings(library(ggplot2))
suppressWarnings(library(tm))
suppressWarnings(library(slam))
suppressWarnings(library(wordcloud))
blogs <- readLines("/Users/KunZhu/Dropbox/Coursera/final/en_US/en_US.blogs.txt")
news <- readLines("/Users/KunZhu/Dropbox/Coursera/final/en_US/en_US.news.txt")
tw <- readLines("/Users/KunZhu/Dropbox/Coursera/final/en_US/en_US.twitter.txt")
writeLines(c(blogs[sample(1:length(blogs), 2000)], news[sample(1:length(news), 2000)], tw[sample(1:length(tw), 2000)]), "/Users/KunZhu/Dropbox/Coursera/final/en_US/sampleText.txt")
inputText <- readLines("/Users/KunZhu/Dropbox/Coursera/final/en_US/sampleText.txt")
badWords <- readLines("/Users/KunZhu/Dropbox/Coursera/final/en_US/bad.txt")
contentToLower <- content_transformer(tolower)
Corpus <- Corpus(VectorSource(inputText))
Corpus <- tm_map(Corpus, content_transformer(function(x, pattern) gsub(pattern, " ", x)), "/|@|\\|")
Corpus <- tm_map(Corpus, removePunctuation)
Corpus <- tm_map(Corpus, contentToLower)
Corpus <- tm_map(Corpus, stripWhitespace)
Corpus <- tm_map(Corpus, removeNumbers)
Corpus <- tm_map(Corpus, removeWords, badWords, lazy = TRUE)
BigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 3, max =       3))
tdm <- TermDocumentMatrix(Corpus, control = list(tokenize =      BigramTokenizer))
tdm <- TermDocumentMatrix(Corpus, control = list(tokenize = BigramTokenizer))
library("RWeka")
install.packages("RWeka")
library("RWeka")
tdm <- TermDocumentMatrix(Corpus, control = list(tokenize = BigramTokenizer))
BigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 3, max =       3))
tdm <- TermDocumentMatrix(Corpus, control = list(tokenize =      BigramTokenizer))
require(RWeka)
TrigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 3, max = 3))
tdm <- TermDocumentMatrix(Corpus, control = list(tokenize = TrigramTokenizer))
adtm <-DocumentTermMatrix(Corpus)
adtm <- removeSparseTerms(adtm, 0.75)
inspect(adtm)
findFreqTerms(adtm, lowfreq=10) # find terms with a frequency higher than 10
findFreqTerms(adtm, lowfreq=10) # find terms with a frequency higher than 20
findFreqTerms(adtm, lowfreq=10) # find terms with a frequency higher than 100
findFreqTerms(adtm, lowfreq=10) # find terms with a frequency higher than 1
findFreqTerms(adtm, lowfreq=100) # find terms with a frequency higher than 1
findFreqTerms(adtm, lowfreq=2) # find terms with a frequency higher than 1
inspect(atdm[1:5,1:5])
inspect(adtm[1:5,1:5])
require(RWeka)
TrigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 3, max = 3))
tdm <- TermDocumentMatrix(a, control = list(tokenize = TrigramTokenizer))
require(RWeka)
TrigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 3, max = 3))
tdm <- TermDocumentMatrix(Corpus), control = list(tokenize = TrigramTokenizer))
require(RWeka)
TrigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 3, max = 3))
tdm <- TermDocumentMatrix(Corpus, control = list(tokenize = TrigramTokenizer))
inspect(Corpus[1:5, !:5])
inspect(Corpus[1:5, 1:5])
require(RWeka)
TrigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 3, max = 3))
inspect(Corpus)
inspect(Corpus[1])
inspect(Corpus[1: 5])
inspect(Corpus[1: 5, 1])
tdm <- TermDocumentMatrix(Corpus, control = list(tokenize = TrigramTokenizer))
options(mc.cores=2)
tdm <- TermDocumentMatrix(Corpus, control = list(tokenize = TrigramTokenizer))
tdm <- TermDocumentMatrix(Corpus, control = list(tokenize = scan_tokenizer))
inspect(tdm[1:5, 5])
inspect(tdm[1:5, 1:5])
inspect(tdm[1:6, 1:5])
inspect(tdm[1:6, 1:7])
tdm <- removeSparseTerms(tdm, 0.75)
inspect(tdm[1:6, 1:7])
inspect(tdm)
inspect(tdm[1:6])
inspect(tdm[1:6,])
inspect(tdm[1])
inspect(tdm)
# Coursera Data Science Specialization - Capstone
# Kun Zhu
# 10/08/2016
# Coursera Data Science Specialization - Capstone
# Kun Zhu
# 10/08/2016
library(shiny)
source("functions.R")
server <- function(input, output, session) {
output$text <- renderText({
paste("Input text is:", input$text)
})
observe({
iniTime <- Sys.time()
textCleansed <- clean(input$text)
if(textCleansed != " ")
{
output$cleaned <- renderText({
paste0("Cleansed text: [",textCleansed,"]")
})
textCleansed <- gsub(" \\* "," ",textCleansed)    # not taking account of profanity terms
predictWords <- predict_model(textCleansed)
updateSelectInput(session = session, inputId = "predicts", choices = predictWords)
endTime <- Sys.time()
output$msg <- renderText({
paste(msg, "\n", sprintf("- Total time processing = %6.3f msecs",1000*(endTime-iniTime)))
})
gc()
}
})
}
ui <- fluidPage(
# Application title
titlePanel("Word Prediction App"),
# User interface controls1
sidebarLayout(
sidebarPanel(
p("Input a word or text and click <Predict> "),
textInput(inputId="text", label = ""),
submitButton("Predict"),
HTML('<script type="text/javascript">
document.getElementById("text").focus();
</script>')
),
mainPanel(
tabsetPanel(
tabPanel("Next words",
conditionalPanel(condition = "input.text != ''",
verbatimTextOutput("text"),
verbatimTextOutput("cleaned"),
verbatimTextOutput("msg"),
selectInput("predicts","Word predictions:",choices=c(""))
)
)
)
)
),
fluidRow(HTML("<div style='margin-left:25px;margin-bottom:12px;color:black;'><strong>Published by: Kun Zhu, 10/10/2016</strong></div>") )
)
shinyApp(ui = ui, server = server)
# Coursera Data Science Specialization - Capstone
# Kun Zhu
# 10/08/2016
library(shiny)
source("functions.R")
server <- function(input, output, session) {
output$text <- renderText({
paste("Input text is:", input$text)
})
observe({
iniTime <- Sys.time()
textCleansed <- clean(input$text)
if(textCleansed != " ")
{
output$cleaned <- renderText({
paste0("Cleansed text: [",textCleansed,"]")
})
textCleansed <- gsub(" \\* "," ",textCleansed)    # not taking account of profanity terms
predictWords <- predict_model(textCleansed)
updateSelectInput(session = session, inputId = "predicts", choices = predictWords)
endTime <- Sys.time()
output$msg <- renderText({
paste(msg, "\n", sprintf("- Total time processing = %6.3f msecs",1000*(endTime-iniTime)))
})
gc()
}
})
}
ui <- fluidPage(
# Application title
titlePanel("Word Prediction App"),
# User interface controls1
sidebarLayout(
sidebarPanel(
p("Input a word or text and click <Predict> "),
textInput(inputId="text", label = ""),
submitButton("Predict"),
HTML('<script type="text/javascript">
document.getElementById("text").focus();
</script>')
),
mainPanel(
tabsetPanel(
tabPanel("Next words",
conditionalPanel(condition = "input.text != ''",
verbatimTextOutput("text"),
verbatimTextOutput("cleaned"),
verbatimTextOutput("msg"),
selectInput("predicts","Word predictions:",choices=c(""))
)
)
)
)
),
fluidRow(HTML("<div style='margin-left:25px;margin-bottom:12px;color:black;'><strong>Published by: Kun Zhu, 10/10/2016</strong></div>") )
)
shinyApp(ui = ui, server = server)
# Coursera Data Science Specialization - Capstone
# Kun Zhu
# 10/08/2016
library(shiny)
source("functions.R")
server <- function(input, output, session) {
output$text <- renderText({
paste("Input text is:", input$text)
})
observe({
iniTime <- Sys.time()
textCleansed <- clean(input$text)
if(textCleansed != " ")
{
output$cleaned <- renderText({
paste0("Cleansed text: [",textCleansed,"]")
})
textCleansed <- gsub(" \\* "," ",textCleansed)    # not taking account of profanity terms
predictWords <- predict_model(textCleansed)
updateSelectInput(session = session, inputId = "predicts", choices = predictWords)
endTime <- Sys.time()
output$msg <- renderText({
paste(msg, "\n", sprintf("- Total time processing = %6.3f msecs",1000*(endTime-iniTime)))
})
gc()
}
})
}
ui <- fluidPage(
# Application title
titlePanel("Word Prediction App"),
# User interface controls1
sidebarLayout(
sidebarPanel(
p("Input a word or text and click <Predict> "),
textInput(inputId="text", label = ""),
submitButton("Predict"),
HTML('<script type="text/javascript">
document.getElementById("text").focus();
</script>')
),
mainPanel(
tabsetPanel(
tabPanel("Next words",
conditionalPanel(condition = "input.text != ''",
verbatimTextOutput("text"),
verbatimTextOutput("cleaned"),
verbatimTextOutput("msg"),
selectInput("predicts","Word predictions:",choices=c(""))
)
)
)
)
),
fluidRow(HTML("<div style='margin-left:25px;margin-bottom:12px;color:black;'><strong>Published by: Kun Zhu, 10/10/2016</strong></div>") )
)
shinyApp(ui = ui, server = server)
setwd("~/Dropbox/Coursera")
runApp("WordPredict")
library(shiny)
runApp("WordPredict")
runApp("/WordPredict")
runApp("WordPredict")
install.packages("qdap")
runApp("WordPredict")
runApp("WordPredict")
runApp("WordPredict")
setwd("~/Dropbox/Coursera/WordPredict")
runApp("WordPredict")
runApp("")
runApp()
help()
help(contractions)
help(??contractions)
help(tm)
help(if)
help("if")
help("??contractions")
help("????contractions")
help("contractions")
help("substr")
runApp()
runApp()
library(rsconnect)
deployApp()
