library(ggplot2)
ggplot(aes(x=supp, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=supp))
summary(ToothGrowth)
ToothGrowth$supp
ToothGrowth$dose
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=dose))
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=factor(dose))
)
x1 <- ToothGrowth[ToothGrowth$dose==0.5,1]
x1 <- ToothGrowth[ToothGrowth$dose==0.5,1]
x2 <- ToothGrowth[ToothGrowth$dose==1,1]
x3 <- ToothGrowth[ToothGrowth$dose==2,1]
x_g1  <- cbind(x1,x2)
x_g2  <- cbind(x1,x3)
x_g3  <- cbind(x2,x3)
t.test(x_g1[,1],x_g1[,2], paired=FALSE, var.equal=FALSE)
t.test(x_g2[,1],x_g2[,2], paired=FALSE, var.equal=FALSE)
?geom_boxplot
x_g1  <- cbind(x1,x2)
x_g2  <- cbind(x1,x3)
x_g3  <- cbind(x2,x3)
ggplot(aes(x=dose, y=len), data=ToothGrowth)
ggplot(aes(x=dose, y=len), data=ToothGrowth)
?ggplot
ggplot(data=ToothGrowth)
ggplot(ToothGrowth)
library(ggplot2)
ggplot(ToothGrowth)
?ggplot
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_point(aes(fill=dose))
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_point(aes(fill=factor(dose))
)
ggplot(aes(x=supp, y=len), data=ToothGrowth) + geom_point(aes(fill=supp))
boxplot(dose~len,data=ToothGrowth, main="Car Milage Data",
xlab="Number of Cylinders", ylab="Miles Per Gallon")
boxplot(len~dose,data=ToothGrowth, main="Car Milage Data",
xlab="Number of Cylinders", ylab="Miles Per Gallon")
boxplot(len~dose,data=ToothGrowth, main="Boxplot of tooth growth (len) v.s. dose methods (dose)",
+         xlab="dose", ylab="len")
boxplot(len~dose,data=ToothGrowth, main="Boxplot of tooth growth (len) v.s. dose methods (dose)"  +         xlab="dose", ylab="len")
boxplot(len~dose,data=ToothGrowth, main="Boxplot of tooth growth (len) v.s. dose methods (dose)", xlab="dose", ylab="len")
boxplot(len~supp,data=ToothGrowth, main="Boxplot of tooth growth (len) v.s. supply method (supp)", xlab="supp", ylab="len")
boxplot(len~dose,data=ToothGrowth, main="Boxplot of tooth growth (len) v.s. dose methods (dose)", xlab="dose", ylab="len")
source('~/.active-rstudio-document')
#ToothGrowth$dose <- as.factor(ToothGrowth$dose)
#ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=dose))
boxplot(len~dose,data=ToothGrowth, main="Boxplot of tooth growth (len) v.s. dose methods (dose)", xlab="dose", ylab="len")
source('~/Desktop/Coursera/Statistical Inference/Project/part2-2-2.R')
# ToothGrowth summary
summary(ToothGrowth)
# t-test for len and supp
t.test(len ~ supp, data = ToothGrowth)
# boxplot for len and supp
#ToothGrowth$dose <- as.factor(ToothGrowth$dose)
#ggplot(aes(x=supp, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=supp))
boxplot(len~supp,data=ToothGrowth, main="Boxplot of tooth growth (len) v.s. supply method (supp)", xlab="supp", ylab="len")
x1 <- ToothGrowth[ToothGrowth$dose==0.5,1]
x2 <- ToothGrowth[ToothGrowth$dose==1,1]
x3 <- ToothGrowth[ToothGrowth$dose==2,1]
x_g1  <- cbind(x1,x2)
x_g2  <- cbind(x1,x3)
x_g3  <- cbind(x2,x3)
# t-test for len and three dose groups
t.test(x_g1[,1],x_g1[,2], paired=FALSE, var.equal=FALSE)
t.test(x_g2[,1],x_g2[,2], paired=FALSE, var.equal=FALSE)
t.test(x_g3[,1],x_g3[,2], paired=FALSE, var.equal=FALSE)
# boxplot for len and dose levels
#ToothGrowth$dose <- as.factor(ToothGrowth$dose)
#ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=dose))
boxplot(len~dose,data=ToothGrowth, main="Boxplot of tooth growth (len) v.s. dose methods (dose)", xlab="dose", ylab="len")
x1  <- c(140, 138, 150, 148, 135)
x2  <- c(132,135, 151,146,130)
t.test(x1,x2, paired=TRUE)
t.test(x1,x2, paired=TRUE, var.equal=FALSE)
qt(1100, 30, 0.95)
?pt
pt(1100, 30, 0.95)
library(swirl)
swirl()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z  <- qnorm(.95)
pnorm(30+z,30, lower.tail=FALSE)
pnorm(30+z,32, lower.tail=FALSE)
pnorm(30+z,32,sd=1 lower.tail=FALSE)
pnorm(30+z,32,sd=1, lower.tail=FALSE)
pnorm(30+z,32,sd=2, lower.tail=FALSE)
pnorm(30+z*2,32,sd=2, lower.tail=FALSE)
power.t.test(n = 16, delta = 2 / 4, sd=1, type ="one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd=4, type ="one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd=200, type ="one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd=200, type ="one.sample", alt = "one.sided")$n
power.t.test(n = .8, delta = 2/4, sd=1, type ="one.sample", alt = "one.sided")$n
ower.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, n=26, sd=§, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n=26, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n=27, sd=1, type = "one.sample", alt = "one.sided")$delta
pValues
head(pValues)
sum(pValue<.05)
sum(pValues<.05)
p.adjust(pValues, method="bonferroni")
sum(p.adjust(pValues,method="bonferroni") < 0.05)
sum(p.adjust(pValues,method="BH") < 0.05)
tail(trueStatus)
table(pValues2<.05, trueStatus)
24/500
table(p.adjust(pValues,method="BH"), trueStatus)
table(p.adjust(pValues2,method="bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues2,method="BH") < 0.05, trueStatus)
n <- 9
μ <- 1100
σ <- 30
quantile = 0.975 # is 95% with 2.5% on both sides of the range
confidenceInterval = μ + c(-1, 1) * qt(quantile, df=n-1) * σ / sqrt(n)
confidenceInterval
n <- 4
x <- 3
test <- binom.test(x=x, n=n, alt="greater")
round(test$p.value,2)
n <- 10
> x <- 1787
> test <- pois.test(x=x, n=n)
> round(test$p.value,2)
n
x
x <- 1787
test <- pois.test(x=x, n=n)
?pois
rate <- 1/100
errors <- 10
days <- 1787
test <-  poisson.test(errors, T = days, r = rate, alt="less")
round(test$p.value,2)
library(swirl)
swirl()
mydf  <- read.csv(path2csv, stringsAsFactors= FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(crab, ip_id, package, country)
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
select(cran, -(X:size))
select(cran, -(5:20))
-(5:20)
select(cran, -(X:size))
filter(cran, package =="swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size >100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
select(cran2, size:ip_id)
cran2  <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res  <- gather(students2, key, value)
res  <- gather(students2, sex_class, count, -grade)
res
?seperate
?separate
separat(res, col=sex_class, into =c("sex", "class"))
separate(res, col=sex_class, into =c("sex", "class"))
submit()
students3
submit()
?gether
?gather
submit()
submit()
submit()
submit()
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
swirl()
swirl()
submit()
submit()
extract_numeric("class5")
?mutate
submit()
submit()
student4
students4
submit()
submit()
submit()
passed
failed
passed  <- mutate(passed, status)
?mutate
passed  <- mutate(passed, status="passed")
failed  <- mutate(failed, status="failed")
bind_roms(passed, failed)
bind_rows(passed, failed)
sat
?select
?separate
submit()
submit()
submit()
submit()
# write the file url and file destination to an object
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
file.dest <- 'ACS.csv'
# download from the URL
download.file(file.url, file.dest, method='curl' )
# read the data
ACS <- read.csv('ACS.csv')
# create vector
ACS$agricultureLogical <- ifelse(ACS$ACR==3 & ACS$AGS==6,TRUE,FALSE)
# read lines
which(ACS$agricultureLogical)
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg'
file.dest <- 'jeff.jpg'
# download from the URL
download.file(file.url, file.dest, mode='wb' )
# load package
library(jpeg)
# load the data
picture <- readJPEG('jeff.jpg', native=TRUE)
# get the quantile info
quantile(picture, probs = c(0.3, 0.8) )
# Getting and Cleaning Data
# Coursera
# John Hopkins University
# Bastiaan Quast
# bquast@gmail.com
# write the file url and file destination to an object
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
file.dest <- 'GDP.csv'
# download from the URL
download.file(file.url, file.dest )
# specify the right lines
rowNames <- seq(10,200, 2)
# read the data
gdp <- read.csv('GDP.csv', header=F, skip=5, nrows=190)
View(gdp)
# second data file
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
file.dest <- 'GDP2.csv'
# download from the URL
download.file(file.url, file.dest )
# read second file
fed <- read.csv('GDP2.csv')
View(fed)
# merge datasets
combined <- merge(gdp, fed, by.x='V1', by.y='CountryCode', sort=TRUE)
View(combined)
# Q3.
# sort the data
combined[with(combined, order(-V2) )]
# Q4.
# OECD
mean(combined[combined$Income.Group=='High income: OECD',]$V2)
# non OECD
mean(combined[combined$Income.Group=='High income: nonOECD',]$V2)
# Q5.
# assign quentile values
quentile <- c(0.2,0.4,0.6,0.8,1)
q <- quantile(combined$V2, quentile)
q1 <- combined$V2 <= 38
xtabs(q1 ~ combined$Income.Group)
combined[with(combined, order(-V2) )]
# download data
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
file.dest <- 'ACS4.csv'
download.file(file.url, file.dest, method='curl')
# load the data
ACS <- read.csv(file.dest)
# extract names
names <- names(ACS)
# string split
strsplit(names, 'wgtp')[123]
# download data
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
file.dest <- 'GDP4.csv'
download.file(file.url, file.dest, method='wget')
# read the data
GDP <- read.csv(file.dest, skip=4, nrows=190)
# substitute comma's out
GDPdol <- gsub(",", "", GDP$X.4)
# convert to integer and calculate mean
GDPdol <- as.integer(GDPdol)
mean(GDPdol, na.rm=TRUE)
# attach the GDP data frame
attach(GDP)
grep("^United",GDP$V4)
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
file.dest <- 'GDP4.csv'
download.file(file.url, file.dest, method='wget')
# read the data
GDP <- read.csv(file.dest, skip=4, nrows=190)
# substitute comma's out
GDPdol <- gsub(",", "", GDP$X.4)
# convert to integer and calculate mean
GDPdol <- as.integer(GDPdol)
mean(GDPdol, na.rm=TRUE)
# attach the GDP data frame
attach(GDP)
grep("^United",GDP$V4)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
?pch
?Devices
?dev.cur
dev.cur()
?par
setwd("~/Desktop/MOOC/Coursera/Data_Science/Reproducible_Research/RepData_PeerAssessment2")
source('~/Desktop/MOOC/Coursera/Data_Science/Reproducible_Research/RepData_PeerAssessment2/PA2.R')
install.package("gridExtra")
install.packages("gridExtra")
sortedInjuries <- transform(sortedInjuries, Event = reorder(Event, -Injury))
injuryPlot <- ggplot(sortedInjuries, aes(x=Event, y=Injury, fill=Event)) +
geom_bar(stat = "identity", width=.8) +
theme(axis.text.x=element_blank()) +
xlab("Severe Weather Type") +
ylab("Num of Injuries") +
ggtitle("Total Injuries by Top 10 Severe Weather Events \n in the U.S. from 1996 - 2011")
sortedFatalities <- transform(sortedFatalities, Event = reorder(Event, -Fatality))
fatalityPlot <- ggplot(sortedFatalities, aes(x=Event, y=Fatality, fill=Event)) +
geom_bar(stat = "identity", width=.8) +
theme(axis.text.x=element_blank(), legend.text=element_text(size=2)) +
xlab("Severe Weather Type") +
ylab("Num of Fatalities") +
ggtitle("Total Fatalities by Top 10 Severe Weather Events \n in the U.S. from 1996 - 2011")
grid.arrange(injuryPlot, fatalityPlot, nrow = 2)
library(gridExtra)
library(ggplot2)
library(gridExtra)
sortedInjuries <- transform(sortedInjuries, Event = reorder(Event, -Injury))
injuryPlot <- ggplot(sortedInjuries, aes(x=Event, y=Injury, fill=Event)) +
geom_bar(stat = "identity", width=.8) +
theme(axis.text.x=element_blank()) +
xlab("Severe Weather Type") +
ylab("Num of Injuries") +
ggtitle("Total Injuries by Top 10 Severe Weather Events \n in the U.S. from 1996 - 2011")
sortedFatalities <- transform(sortedFatalities, Event = reorder(Event, -Fatality))
fatalityPlot <- ggplot(sortedFatalities, aes(x=Event, y=Fatality, fill=Event)) +
geom_bar(stat = "identity", width=.8) +
theme(axis.text.x=element_blank(), legend.text=element_text(size=2)) +
xlab("Severe Weather Type") +
ylab("Num of Fatalities") +
ggtitle("Total Fatalities by Top 10 Severe Weather Events \n in the U.S. from 1996 - 2011")
grid.arrange(injuryPlot, fatalityPlot, nrow = 2)
sortedInjuries <- transform(sortedInjuries, Event = reorder(Event, -Injury))
injuryPlot <- ggplot(sortedInjuries, aes(x=Event, y=Injury, fill=Event)) +
geom_bar(stat = "identity", width=.8) +
theme(axis.text.x=element_blank()) +
xlab("Severe Weather Type") +
ylab("Num of Injuries") +
ggtitle("Total Injuries by Top 10 Severe Weather Events \n in the U.S. from 1996 - 2011")
sortedFatalities <- transform(sortedFatalities, Event = reorder(Event, -Fatality))
fatalityPlot <- ggplot(sortedFatalities, aes(x=Event, y=Fatality, fill=Event)) +
geom_bar(stat = "identity", width=.8) +
theme(axis.text.x=element_blank()) +
xlab("Severe Weather Type") +
ylab("Num of Fatalities") +
ggtitle("Total Fatalities by Top 10 Severe Weather Events \n in the U.S. from 1996 - 2011")
grid.arrange(injuryPlot, fatalityPlot, nrow = 2)
```{r fig.width=7, fig.height=4}
cache = TRUE
sortedInjuries <- transform(sortedInjuries, Event = reorder(Event, -Injury))
injuryPlot <- ggplot(sortedInjuries, aes(x=Event, y=Injury, fill=Event)) +
geom_bar(stat = "identity", width=.8) +
theme(axis.text.x=element_blank()) +
xlab("Severe Weather Type") +
ylab("Num of Injuries") +
ggtitle("Total Injuries by Top 10 Severe Weather Events \n in the U.S. from 1996 - 2011")
sortedFatalities <- transform(sortedFatalities, Event = reorder(Event, -Fatality))
fatalityPlot <- ggplot(sortedFatalities, aes(x=Event, y=Fatality, fill=Event)) +
geom_bar(stat = "identity", width=.8) +
theme(axis.text.x=element_blank()) +
xlab("Severe Weather Type") +
ylab("Num of Fatalities") +
ggtitle("Total Fatalities by Top 10 Severe Weather Events \n in the U.S. from 1996 - 2011")
grid.arrange(injuryPlot, fatalityPlot, nrow = 2)
```
