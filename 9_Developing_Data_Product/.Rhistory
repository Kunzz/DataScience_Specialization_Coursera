resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
View(rstudent(fit))
dy <- predict(fitno, out2)-predict(fit, out2)
sum(dy^2)/2*sigma^2
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit)$coefficient
head(mtcars)
fitua <- lm(mpg ~ factor(cyl), data = mtcars)
summary(fit)$coefficient-summary(fitua)$coefficient
summary(fit)$coefficient
summary(fitua)$coefficient
fit_inter <- lm(mpg ~ factor(cyl) * wt, data = mtcars)
anova(fit, fit_inter, test = "Chisq")
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit5 <- lm(y ~ x)
hatvalues(fit5)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fitxy2 <- lm(y ~ x)
fitxy2
dfbeta(fitxy2)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit6 <- lm(y ~ x)
dfbetas(fit6)[, 2]
?mtcars
head(mtcars)
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("auto", "man")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p + geom_violin() +
geom_boxplot(width = .1, fill = "black", outlier.color=NA) +
stat_summary(fun.y = median, geom="point", fill="white", shape=21, size=5.0)
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("auto", "man")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p + geom_violin() +
geom_boxplot(width = .1, fill = "black", outlier.color=NA) +
stat_summary(fun.y = median, geom="point", fill="white", shape=21, size=5.0)
source('~/.active-rstudio-document')
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("auto", "man")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p + geom_violin() +
geom_boxplot(width = .1, fill = "black", outlier.color=NA) +
stat_summary(fun.y = median, geom="point", fill="white", shape=21, size=5.0)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
levels(mtcars$am) <- c("auto", "man")
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("auto", "man")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p + geom_violin() + geom_boxplot(width = .1, fill = "black", outlier.color=NA) +
stat_summary(fun.y = median, geom="point", fill="white", shape=21, size=5.0)
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("auto", "man")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p + geom_violin() + geom_boxplot(width = .1, fill = "red", outlier.color=NA) +
stat_summary(fun.y = median, geom="point", fill="white", shape=21, size=5.0)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("auto", "man")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p + geom_violin() + geom_boxplot(width = .1, fill = "yellow", outlier.color=NA) +
stat_summary(fun.y = median, geom="point", fill="white", shape=21, size=5.0)
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("auto", "man")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p + geom_violin()  +
stat_summary(fun.y = median, geom="point", fill="white", shape=21, size=5.0)
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("auto", "man")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p + geom_violin()  +
stat_summary(fun.y = median, geom="point", fill="black", shape=21, size=5.0)
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("auto", "man")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p + geom_violin()  +
stat_summary(fun.y = median, geom="line", fill="black", shape=21, size=5.0)
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("auto", "man")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p + geom_violin()  +
stat_summary(fun.y = median, geom="line", fill="black", shape=22, size=5.0)
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("auto", "man")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p + geom_violin()  +
stat_summary(fun.y = median, geom="point", fill="black", shape=21, size=5.0)
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("auto", "man")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p + geom_violin()  +
stat_summary(fun.y = median, geom="point", fill="red", shape=21, size=5.0)
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("auto", "man")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p + geom_violin()  +
stat_summary(fun.y = mean, geom="point", fill="grey", shape=21, size=5.0)
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("automatic", "manual")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p + geom_violin()  +
stat_summary(fun.y = mean, geom="point", fill="grey", shape=21, size=5.0)
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("automatic", "manual")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p + geom_violin()  +
stat_summary(fun.y = mean, geom="point", fill="grey", shape=21, size=2.0)
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("automatic", "manual")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p + geom_violin()  +
stat_summary(fun.y = mean, geom="point", fill="grey", shape=21, size=10.0)
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("automatic", "manual")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p + geom_violin()  + geom_boxplot(width = .1, fill = "black", outlier.color=NA) +
stat_summary(fun.y = mean, geom="point", fill="grey", shape=21, size=10.0)
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("automatic", "manual")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p   + geom_boxplot(width = .1, fill = "black", outlier.color=NA) +
stat_summary(fun.y = mean, geom="point", fill="grey", shape=21, size=10.0)
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("automatic", "manual")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p   + geom_boxplot(width = .1, fill = "white", outlier.color=NA) +
stat_summary(fun.y = mean, geom="point", fill="grey", shape=21, size=2.0)
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("automatic", "manual")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p   + geom_boxplot(width = .1, fill = "white", outlier.color=NA)
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("automatic", "manual")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p   + geom_boxplot(width = .1, fill = "blue", outlier.color=NA)
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("automatic", "manual")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p   + geom_boxplot(width = .1, fill = "salman", outlier.color=NA)
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("automatic", "manual")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p   + geom_boxplot(width = .1, fill = "white", outlier.color=red)
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("automatic", "manual")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p   + geom_boxplot(width = .1, fill = "grey", outlier.color=red)
source('~/.active-rstudio-document')
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("automatic", "manual")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p   + geom_boxplot(width = .1, fill = "grey", outlier.color=NA)
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("automatic", "manual")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p   + geom_boxplot(width = .1, fill = "grey", outlier.color=red)
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("automatic", "manual")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p   + geom_boxplot(width = .1, fill = "grey", outlier.color=red)
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("automatic", "manual")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p   + geom_boxplot(width = .1, fill = "grey", outlier.color="red")
library(ggplot2); data(mtcars) #dataframe with 32 obs of 11 variables
mtcars$am <- as.factor(mtcars$am); levels(mtcars$am) <- c("automatic", "manual")
avg.a <- mean(mtcars$mpg[mtcars$am=="auto"]); avg.m <- mean(mtcars$mpg[mtcars$am=="man"])
p <- ggplot(mtcars, aes(x = am, y = mpg)); p   + geom_boxplot(width = .1, fill = "white", outlier.color=NA)
summary(stepModel)
fitAll<- lm(mpg ~ ., data = mtcars)
stepModel <- step(fitAll, k=log(nrow(mtcars)))
summary(stepModel)
stepModel <- step(fitAll, k=log(nrow(mtcars)) , direction ="back", trace = 0 )
summary(stepModel)
stepModel
mpg.interact2 <- lm(mpg ~ wt + qsec + am + am*wt, data=mtcars)
summary(mpg.interact2)$coefficients
best.r <- summary(mpg.interact2)$adj.r.squared
summary(mpg.interact2)$adj.r.squared
14.079 - 4.141
14.079 - 4.141*3 = 9.938
14.079 - 4.141*3
14.079 - 4.141*4
14.079 - 4.141*3.5
14.079 - 4.141*1.5
amIntWtModel<-lm(mpg ~ wt + qsec + am + wt:am, data=mtcars)
summary(amIntWtModel)
amIntWtModel2<-lm(mpg ~ wt + qsec + am + wt*am, data=mtcars)
summary(amIntWtModel2)
fitAMIntWt <- lm(mpg ~ wt + qsec + am + am*wt, data=mtcars)
summary(fitAMIntWt)$coefficients[4:5, ]
fitAMIntWt <- lm(mpg ~ wt + qsec + am + am*wt, data=mtcars)
summary(fitAMIntWt)$coefficients[4:5, ]
fitAMIntWt <- lm(mpg ~ wt + qsec + am + am*wt, data=mtcars)
summary(fitAMIntWt)$coefficients
summary(fitAMIntWt)
confident(fitAmIntWt)
confint(fitAmIntWt)
fitAmIntWt<- lm(mpg ~ wt + qsec + am + am*wt, data=mtcars)
confint(fitAmIntWt)
swirl()
library(swirl)
swirl()
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
fit <- lm(Numeric ~ Year, x[hunger$Sex=="Female"])
fit <- lm(Numeric ~ Year, hunger$Sex=="Female")
x[hunger$Sex=="Female"]
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"], hunger)
lmM <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"], hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
summary(lmInter)
summary(lmBoth)
library(swirl)
swirl()
?shuttle
library(MASS)
?shuttle
names(shuttle)
head(shuttle)
library(crat)
library(caret)
install.packages("caret")
?set.seed
install.package("ISLR")
install.packages("ISLR")
libaray(caret)
install.packages(caret)
install.packages("caret")
libary(caret)
library(caret)
install.packages("kernlab")
library(kernlab)
data(spam)
head(spam)
install.packages("ISLR")
?Wage
libary(ISLR)
library(ISLR)
?Wage
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDiease)
data(AlzheimerDisease)
?diagnosis
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(CompressiveStrength)
plot(mixtures$CompressiveStrength)
?ggplot
?lattice
qplot(CompressiveStrength, data=mixtures)
plot(mixtures$CompressiveStrength, col=typeColor)
install.packages("Hmisc")
?cut2
?cut2()
plot(mixtures$CompressiveStrength)
hist(mixtures$CompressiveStrength)
head(mixtures$CompressiveStrength)
names(mixtures$CompressiveStrength)
names(mixtures)
hist(training)
str(training)
?cut2
?cut2()
suppressMessages(library(dplyr))
suppressMessages(library(Hmisc))
suppressMessages(library(gridExtra))
training2 <- mutate(training, index=1:nrow(training))
heads(training)
head(training)
head(training2)
# compute the model with non_pca predictors
non_pca_model <- train(diagnosis ~ ., data=new_training, method="glm")
# apply the non pca model on the testing set and check the accuracy
non_pca_result <- confusionMatrix(new_testing[, 13], predict(non_pca_model, new_testing[, -13]))
non_pca_result
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
suppressMessages(library(dplyr))
new_training <- training[, c(names(training)[IL_col_idx], "diagnosis")]
names(new_training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
```{r}
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
suppressMessages(library(dplyr))
new_training <- training[, c(names(training)[IL_col_idx], "diagnosis")]
names(new_training)
pc_training_obj <- preProcess(new_training[, -13], method=c('center', 'scale', 'pca'), thresh=0.8)
pc_training_preds <- predict(pc_training_obj, new_training[, -13])
pc_testing_preds <- predict(pc_training_obj, new_testing[, -13])
# compute the model with pca predictors
pca_model <- train(new_training$diagnosis ~ ., data=pc_training_preds, method="glm")
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
suppressMessages(library(dplyr))
new_training <- training[, c(names(training)[IL_col_idx], "diagnosis")]
names(new_training)
IL_col_idx <- grep("^[Ii][Ll].*", names(testing))
suppressMessages(library(dplyr))
new_testing <- testing[, c(names(testing)[IL_col_idx], "diagnosis")]
names(new_testing)
pc_training_obj <- preProcess(new_training[, -13], method=c('center', 'scale', 'pca'), thresh=0.8)
pc_training_preds <- predict(pc_training_obj, new_training[, -13])
pc_testing_preds <- predict(pc_training_obj, new_testing[, -13])
# compute the model with pca predictors
pca_model <- train(new_training$diagnosis ~ ., data=pc_training_preds, method="glm")
# compute the model with non_pca predictors
non_pca_model <- train(diagnosis ~ ., data=new_training, method="glm")
# apply the non pca model on the testing set and check the accuracy
non_pca_result <- confusionMatrix(new_testing[, 13], predict(non_pca_model, new_testing[, -13]))
non_pca_result
non_pca_model <- train(diagnosis ~ ., data=new_training, method="glm")
library(caret); library(kernlab); data(spam)
non_pca_model <- train(diagnosis ~ ., data=new_training, method="glm")
install.packages('e1071', dependencies=TRUE)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(AppliedPredictiveModeling)
suppressMessages(library(caret))
data(AlzheimerDisease)
head(AlzheimerDisease)
summary(AlzheimerDisease)
AlzheimerDisease
?AlzheimerDisease
?diagnosis
head(diagnosis)
head(predictors)
data(AlzheimerDisease, verbose = TRUE, envir = e <- new.env())
adData = data.frame(diagnosis,predictors)
head(adData)
head(predictor)
head(predictors)
summary(predictors)
name(predictors)
names(predictors)
names(adData)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
data()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
pc_training_obj <- preProcess(new_training[, -13], method=c('center', 'scale', 'pca'), thresh=0.8)
pc_training_obj
preProcess(new_training[, -13], method=c('center', 'scale', 'pca'), thresh=0.8)
sessionInfo()
packageVersion("AppliedPredictiveModeling")
sessionInfo()
install.packages("AppliedPredictiveModeling")
install.packages("caret")
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
install.packages("ins")
install.packages("AppliedPredictiveModeling")
packageVersion("caret")
packageVersion("ElemStatLearn")
packageVersion("pgmm")
packageVersion("rpart")
packageVersion("AppliedPredictiveModeling")
packageVersion("caret")
packageVersion("ElemStatLearn")
packageVersion("pgmm")
packageVersion("rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y = segmentationOriginal, p = 0.7, list = FALSE)
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
dim(training): dim(testing)
training <- subset(segmentationOriginal, Case = "Train")
head(training)
training <- subset(segmentationOriginal, Case = Train)
head(training)
training <- subset(segmentationOriginal, Case == "Train")
head(training)
fit <- rpart(segmentationOriginal ~ . , data = training)
install.packages("rpart")
install.packages("rpart")
fit <- rpart(segmentationOriginal ~ . , data = training)
?rpart
modFit <- train(Class ~ ., method = "rpart", data = training)
modFit <- train(Class ~ ., method = "rpart", data = train)
?train
install.packages("caret")
modFit <- train(Class ~ ., method = "rpart", data = train)
?train
??train
inTrain <- createDataPartition(y = segmentationOriginal$Case, p = 0.6,
list = FALSE) # 60% training
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
library(AppliedPredictiveModeling)
data(segmentationOriginal)
suppressMessages(library(caret))
modFit <- train(Class ~ ., method = "rpart", data = train)
modFit <- train(Class ~ ., method = "rpart", data = training)
install.packages("e1071", dep = TRUE)
modFit <- train(Class ~ ., method = "rpart", data = training)
summary(modFit)
install.packages("rattle")
install.packages("rattle")
install.packages("rpart.plot")
install.packages("rpart")
install.packages("rpart")
The webproxy and simplecached developed using POSIX API.
---
sum(-199,00
-3 632,00
-1 766,00
-3 632,00
-199,00
-246,00
-3 632,00
-2 188,00
-246,00
-3 632,00
-2 188,00
-246,00
-3 632,00
-2 188,00
-253,00
-3 632,00
-2 188,00
-253,00
-3 632,00
-2 188,00
-253,00
-2 188,00
-3 632,00
-273,00
-3 632,00
-2 188,00
-273,00
-3 632,00
-2 335,00
-273,00
-2 043,00
-3 177,00
-279,00
)
aa <- read.table("~/Desktop/aa.rtf", quote="\"")
View(aa)
setwd("~/Desktop/Mooc/Coursera/Data_Science/Data Product")
library(shiny)
runApp()
library(rsconnect)
deployApp()
rsconnect::setAccountInfo(name='kunz', token='B33F969A72AF3084B58FB22DBC65D3B0', secret='jOcEIGCFA6a89UV8SXG0IN/d70hEQE9f9oyhU6dj')
deployApp()
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='kunz', token='B33F969A72AF3084B58FB22DBC65D3B0', secret='jOcEIGCFA6a89UV8SXG0IN/d70hEQE9f9oyhU6dj')
deployApp()
deployApp()
library(rsconnect)
deployApp()
rsconnect::setAccountInfo(name='kunz',
token='B33F969A72AF3084B58FB22DBC65D3B0',
secret='jOcEIGCFA6a89UV8SXG0IN/d70hEQE9f9oyhU6dj')
rsconnect::setAccountInfo(name='kunz',token='B33F969A72AF3084B58FB22DBC65D3B0', secret='jOcEIGCFA6a89UV8SXG0IN/d70hEQE9f9oyhU6dj')
deployApp()
rsconnect::setAccountInfo(name='kunz',
token='B33F969A72AF3084B58FB22DBC65D3B0',
secret='<SECRET>')
rsconnect::setAccountInfo(name='kunz',token='B33F969A72AF3084B58FB22DBC65D3B0',secret='<SECRET>')
rsconnect::setAccountInfo(name='kunz', token='B33F969A72AF3084B58FB22DBC65D3B0', secret='jOcEIGCFA6a89UV8SXG0IN/d70hEQE9f9oyhU6dj')
deployApp()
runApp
runApp()
library(shiny)
runApp()
deployApp()
getwd()
setwd("~/Desktop/Mooc/Coursera/Data_Science/DataProduct")
deployApp()
setwd("~/Desktop/Mooc/Coursera/Data_Science/DataProduct/Coursera_DataScience_DataProduct")
setwd("~/Desktop/Mooc/Coursera/Data_Science/DataProduct")
